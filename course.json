{
  "course_name": "November Cohort 2024  - Pathway 4",
  "topics": [
    {
      "name": "Section 587",
      "assignments": [
        {
          "title": "Building REST APIs for Orders and Order Details",
          "description": "E-Commerce Project Assignments\nProject Overview\nIn this project, you will create the backend of an e-commerce web application using Express and PostgreSQL. The project will be divided into two assignments:\n\n\nAssignment 1: REST API for users and products.\n\n\nAssignment 2: REST API for orders and order details.\n\n\n\nAssignment 2: Building REST APIs for Orders and Order Details\n1. Database Tables\n\n\nOrders Table:\n\n\norder_id (Primary Key, auto-increment)\n\n\nuser_id (Foreign Key referencing users)\n\n\norder_date (Date, default to current date)\n\n\nstatus (Text, e.g., 'Pending', 'Completed')\n\n\n\n\nOrder Details Table:\n\n\ndetail_id (Primary Key, auto-increment)\n\n\norder_id (Foreign Key referencing orders)\n\n\nproduct_id (Foreign Key referencing products)\n\n\nquantity (Integer, not null)\n\n\nprice (Decimal, not null)\n\n\n\n\n2. REST API Endpoints\n\n\nOrders Endpoints:\n\n\nGET /api/orders: Retrieve all orders.\n\n\nPOST /api/orders: Create a new order.\n\n\nGET /api/orders/:id: Retrieve an order by ID.\n\n\nPUT /api/orders/:id: Update an order‚Äôs status.\n\n\nDELETE /api/orders/:id: Delete an order.\n\n\n\n\nOrder Details Endpoints:\n\n\nGET /api/orders/:order_id/details: Retrieve all order details for a specific order.\n\n\nPOST /api/orders/:order_id/details: Add items to an order.\n\n\nPUT /api/orders/:order_id/details/:detail_id: Update quantity or price of an item.\n\n\nDELETE /api/orders/:order_id/details/:detail_id: Delete an item from an order.\n\n\n\n\n3. Requirements:\n\n\nCreate the tables using PostgreSQL.\n\n\nWrite SQL scripts for creating and inserting sample data into the tables.\n\n\nImplement the REST API using Express and connect it to the database using pg-promise.\n\n\nTest the API endpoints using Postman.\n\n\nSubmission:\n\n\nSQL scripts for creating the tables and sample data.\n\n\nJavaScript code for the API.\n\n\nPostman collection or screenshots showing successful API requests."
        },
        {
          "title": "Task 7",
          "description": "Microdeliverable Task 7: Implementing Functional Screens\nObjective\nIn this task, students will:\n\nDevelop the main functional screens for their assigned project.\nImplement CRUD functionalities while ensuring data is filtered based on the logged-in user.\nUse appropriate form inputs and selectors where necessary.\nIf the project requires a menu, implement a navigation menu to allow users to switch between sections.\n\n\nTask Instructions\n1. Social Media App: Implement Tweet and Comment Features\nStudents working on the Social Media App must create:\n\nWall Component (Wall.jsx) ‚Äì Displays all tweets from users.\nAdd Tweet Component (AddTweet.jsx) ‚Äì A form where users can post a new tweet.\nAdd Comment Component (AddComment.jsx) ‚Äì Allows users to comment on a tweet.\nNavigation Menu (Menu.jsx) ‚Äì Allows users to navigate between different sections.\n\nExample Structure:\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ Menu.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ Wall.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ AddTweet.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ AddComment.jsx\n\n\nEnsure only authenticated users can post tweets and comments.\nFetch and display tweets from all users.\n\n\n2. Event Management App: Event CRUD & Attendance Tracking\nStudents working on the Event Management App must create:\n\nEvent Creation Component (EventManager.jsx) ‚Äì Allows logged-in users to create, edit, and delete events (filter to show only their events).\nEvent Attendance Component (EventAttendance.jsx) ‚Äì A form where users can mark attendance for events. This form should include a selector to choose an event.\nNavigation Menu (Menu.jsx) ‚Äì Allows users to navigate between event management and attendance pages.\n\nExample Structure:\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ Menu.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ EventManager.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ EventAttendance.jsx\n\n\nEnsure only the logged-in user‚Äôs events appear in their event manager.\nAllow users to track attendance for events they created.\nUse a dropdown selector for selecting an event when marking attendance.\n\n\n3. To-Do List App: Task Management\nStudents working on the To-Do List App must create:\n\nTask Table Component (TaskList.jsx) ‚Äì Displays the logged-in user‚Äôs tasks.\nAdd Task Component (AddTask.jsx) ‚Äì Allows users to create new tasks.\n\nExample Structure:\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ TaskList.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ AddTask.jsx\n\n\nEnsure only tasks belonging to the logged-in user are displayed.\nImplement filtering options (e.g., show only pending or completed tasks).\nAllow users to edit and delete their tasks.\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL containing:\n\nFunctional components (Wall.jsx, AddTweet.jsx, EventManager.jsx, etc.).\nAPI requests properly integrated with the backend.\nMenu component (Menu.jsx) if required by the project.\n\n\nScreenshots showing:\n\nFunctional CRUD operations.\nUser-specific filtering in event and task management.\nDropdown selector for event attendance.\nNavigation between sections using the menu.\n\n\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nFunctional components implemented correctly\n25%\n\n\nData properly filtered for the logged-in user\n25%\n\n\nDropdown selector for event attendance works\n25%\n\n\nCode readability & structure\n25%"
        },
        {
          "title": "AWS RDS PostgreSQL Setup",
          "description": "Assignment: AWS RDS PostgreSQL Setup (1 Point)\nObjective:This assignment is designed to help you practice setting up a PostgreSQL database using Amazon RDS and connecting to it using Visual Studio Code.\n\nInstructions\n\n\nLog in to your AWS account using the credentials provided by your instructor, Fernando Lopez.\n\n\nCreate an Amazon RDS instance for PostgreSQL.\n\n\nBe sure to configure public access, enable password authentication, and take note of the database endpoint.\n\n\n\n\nConnect to your RDS instance using Visual Studio Code and a PostgreSQL extension or client of your choice.\n\n\n\nReference Videos (Week 2 Folder)\nTo guide you through the process, please watch the following two videos uploaded in the shared Google Drive folder under Week 2:\n\n\nCreate RDS Instance AWS.mp4 ‚Äî How to set up your PostgreSQL instance on AWS RDS.\n\n\nConnect PostgreSQL VSCode.mp4 ‚Äî How to connect your RDS instance to Visual Studio Code.\n\n\n\nSubmission\nOnce you have successfully connected to your RDS instance:\n\n\nTake a screenshot of your terminal or database client showing a successful connection.\n\n\nUpload your screenshot to the assignment submission area on Moodle (or your platform)."
        },
        {
          "title": "Building REST APIs for Users and Products",
          "description": "E-Commerce Project Assignments\nProject Overview\nIn this project, you will create the backend of an e-commerce web application using Express and PostgreSQL. The project will be divided into two assignments:\n\n\nAssignment 1: REST API for users and products.\n\n\nAssignment 2: REST API for orders and order details.\n\n\n\nAssignment 1: Building REST APIs for Users and Products\n1. Database Tables\n\n\nUsers Table:\n\n\nid (Primary Key, auto-increment)\n\n\nname (Text, not null)\n\n\nemail (Text, unique, not null)\n\n\n\n\nProducts Table:\n\n\nid (Primary Key, auto-increment)\n\n\nname (Text, not null)\n\n\ndescription (Text)\n\n\nprice (Decimal, not null)\n\n\nstock (Integer, not null)\n\n\n\n\n2. REST API Endpoints\n\n\nUsers Endpoints:\n\n\nGET /api/users: Retrieve all users.\n\n\nPOST /api/users: Add a new user.\n\n\nGET /api/users/:id: Retrieve a user by ID.\n\n\nPUT /api/users/:id: Update a user's details.\n\n\nDELETE /api/users/:id: Delete a user.\n\n\n\n\nProducts Endpoints:\n\n\nGET /api/products: Retrieve all products.\n\n\nPOST /api/products: Add a new product.\n\n\nGET /api/products/:id: Retrieve a product by ID.\n\n\nPUT /api/products/:id: Update product details.\n\n\nDELETE /api/products/:id: Delete a product.\n\n\n\n\n3. Requirements:\n\n\nCreate the tables using PostgreSQL.\n\n\nWrite SQL scripts for creating and inserting sample data into the tables.\n\n\nImplement the REST API using Express and connect it to the database using pg-promise.\n\n\nTest the API endpoints using Postman.\n\n\nSubmission:\n\n\nSQL scripts for creating the tables and sample data.\n\n\nJavaScript code for the API.\n\n\nPostman collection or screenshots showing successful API requests."
        },
        {
          "title": "Task 8",
          "description": "üöÄ Deploying a Node.js Project on AWS Lightsail\nThis guide will walk you through deploying a full-stack Node.js + React application on an AWS Lightsail instance.\n\n1Ô∏è‚É£ Log in to AWS Account\n\nGo to AWS Lightsail.\nClick \"Sign in\" and enter your AWS credentials.\n\n\n2Ô∏è‚É£ Create a Lightsail Instance with Node.js\n\nClick \"Create Instance\".\nSelect \"Linux/Unix\" as the platform.\nChoose \"Node.js\" as the blueprint.\nSelect an appropriate instance plan (e.g., $5/month for small projects).\nGive your instance a name (e.g., node-app).\nClick \"Create Instance\" and wait for it to start.\n\n\n3Ô∏è‚É£ Modify Your Backend\nAll API endpoints should be prefixed with /api/.For example, if you had:\napp.get(\"/movies\", (req, res) => { ... });\n\nChange it to:\napp.get(\"/api/movies\", (req, res) => { ... });\n\n3.1 Add the Required Imports\nModify your index.js to handle static files correctly:\nimport path from 'path';\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n\n4Ô∏è‚É£ Export the React Project to a Build Distribution\nOn your local computer, navigate to the React project folder and run:\nnpm run build\n\nThis will create a build/ folder with the production-ready files.\n\n5Ô∏è‚É£ Add the Build Distribution to the Backend\nCopy the build/ folder (from your front-end project) into your backend project and rename it to public/\nMake sure your .env of your front-end points to the new IP of your Instance.\n\n\n¬†\n\n6Ô∏è‚É£ Modify the Backend to Serve Static Files\nAfter defining all routes in index.js, add this code:\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"index.html\")); // React\n});\n\nThis ensures that your backend serves the frontend files.\n\n7Ô∏è‚É£ Commit the Changes on Your Local Computer\nSave all changes and push them to GitHub:\ngit add .\ngit commit -m \"Prepare backend for deployment\"\ngit push origin main\n\n\n8Ô∏è‚É£ Connect to Your Lightsail Instance\n\nOpen AWS Lightsail.\nClick on your instance.\nClick \"Connect using SSH\".\n\n\n9Ô∏è‚É£ Delete Existing Files in htdocs\nrm -rf htdocs/*\n\n\nüîü Clone Your Repository in the htdocs Folder\ncd htdocs\ngit clone https://github.com/your-username/your-repo.git htdocs\n\n\n1Ô∏è‚É£1Ô∏è‚É£ Install Dependencies\nNavigate to the htdocs folder:\ncd your-repo-folder\nnpm install\n\n\n1Ô∏è‚É£2Ô∏è‚É£ Add the .env File\nCreate the .env file:\necho \"DATABASE_URL=postgresql://codex_academy:3Gs9uKNWMxSAhQh6pftWZweeKWVDJKQ2@dpg-cuuh3maj1k6c739slio0-a.oregon-postgres.render.com/codex_academy?ssl=true\nKEY_SECRET=codex\nPORT=4000\" > .env\n\n\n1Ô∏è‚É£3Ô∏è‚É£ Start the Server\nRun:\nnode index.js\n\nor use PM2 to keep it running in the background:\nsudo npm install -g pm2\npm2 start index.js --name \"node-app\"\npm2 save\npm2 startup\n\n\n\nüéâ Your Node.js App is Live on AWS Lightsail!\nNow, visit:\nhttp://your-lightsail-ip:4000"
        },
        {
          "title": "Task 2",
          "description": "Microdeliverable Task 2: Database Design and Implementation\nObjective\nIn this task, students will:\n\nDesign an Entity-Relationship Diagram (ERD) for their project.\nCreate an SQL script to define the required tables.\nExecute the SQL script on their PostgreSQL database.\nInsert sample data into the tables using SQL commands or a database client.\nSubmit the backend repository URL along with proof of the completed task.\n\n\nTask Instructions\n1. Create an ERD Diagram\n\nUse an ERD tool such as:\n\ndbdiagram.io\nDraw.io\nLucidchart\n\n\nEnsure the diagram includes:\n\nAll required tables (Users, Events, Attendance for Event Manager; Users, Posts, Comments for Social Media, etc.).\nPrimary keys and foreign keys.\nRelationships between tables (one-to-many, many-to-many where applicable).\n\n\n\n2. Write the SQL File for Table Creation\n\nCreate a file named db.sql inside the db/ folder in the backend.\nThe SQL file should contain:\n\nTable definitions with correct primary and foreign keys.\nUse appropriate data types for each column.\n\n\n\nExample SQL File (db/db.sql):\nCREATE TABLE Users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE Events (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    date DATE NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    user_id INT REFERENCES Users(id) ON DELETE CASCADE\n);\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES Events(id) ON DELETE CASCADE,\n    user_id INT REFERENCES Users(id) ON DELETE CASCADE,\n    attendance_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n3. Execute the SQL File and Create Tables\n\nConnect to your PostgreSQL database in Render or NeonDB.\nUse VSCode's DB Client extension¬†to execute db.sql and create tables.\nVerify that tables are created by running:\nSELECT * FROM Users;\nSELECT * FROM Events;\nSELECT * FROM Attendance;\n\n\n\n4. Insert Sample Data into the Tables\n\nAdd at least three records per table.\nInsert data using SQL commands or through a database client UI.\n\nExample SQL for Data Insertion:\nINSERT INTO Users (name, email, password) VALUES ('Alice Johnson', 'alice@example.com', 'password123');\nINSERT INTO Events (title, date, location, user_id) VALUES ('Tech Conference 2025', '2025-06-15', 'New York', 1);\nINSERT INTO Attendance (event_id, user_id) VALUES (1, 1);\n\n\n¬†\n\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL of their backend, containing:\n\ndb.sql file inside the db/ folder.\nCode for database connection.\n\n\nScreenshot showing the created tables in their database.\nScreenshot or SQL file showing the inserted data.\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nERD Diagram properly created\n30%\n\n\nSQL script includes correct tables\n30%\n\n\nTables successfully created & tested\n20%\n\n\nSample data inserted & verified\n20%"
        },
        {
          "title": "SQL Bolt Assignment",
          "description": "SQL Bolt Assignment\nObjective\nBy the end of this assignment, students will:\n\nComplete all SQL Bolt lessons to gain practical knowledge of SQL fundamentals.\nSubmit screenshots of completed lessons as proof of completion.\n\n\nSteps for Students\n\n\nAccess SQL Bolt:\n\nGo to SQL Bolt.\nSQL Bolt provides a series of lessons and exercises covering SQL basics to advanced topics.\n\n\n\nComplete All Lessons and Exercises:\n\nThere are 18 interactive lessons on SQL Bolt. Complete each one, including:\n\nLesson 1: Introduction to Databases.\nLessons 2‚Äì6: Querying, filtering, and sorting data.\nLessons 7‚Äì13: Joining, grouping, and set operations.\nLessons 14‚Äì18: Advanced topics like subqueries, creating tables, and managing databases.\n\n\n\n\n\nTake Screenshots:\n\nAfter completing each lesson, take a screenshot showing:\n\nThe completed exercises for the lesson.\nYour answers and the results in the SQL Bolt interface.\n\n\n\n\n\nSubmit Your Assignment:\n\nUpload your completed file to the course's submission platform.\n\n\n\n\nEvaluation Criteria\n\nCompletion of all lessons: Each lesson should be completed with clear screenshots showing correct answers.\nOrganization: Screenshots should be in order and easy to review."
        },
        {
          "title": "Lab 1",
          "description": "Laboratory Guide: Gym Database Creation and DML Operations\n\nObjective\nBy the end of this laboratory, students will:\n\nUnderstand how to create tables for the gym management system.\nLearn how to define primary and foreign keys.\nPractice adding relationships between tables using foreign keys.\nPerform basic DML operations: INSERT, DELETE, UPDATE, and SELECT.\n\n\nGym Database Problem\nThe gym management system requires the following tables:\n\nTrainers: Information about gym trainers.\nClasses: Details of the classes offered by the gym.\nMembers: Information about the gym members.\nEnrollments: Tracks which members are enrolled in which classes.\n\n\nStep 1: Creating Tables\n1. Trainers Table\nThis table stores information about the trainers.\nTable Definition:\n\ntrainer_id: Unique identifier for each trainer (Primary Key).\nname: Name of the trainer.\nspecialization: Trainer‚Äôs area of expertise.\nemail: Contact email (must be unique).\n\nSQL Statement:\nCREATE TABLE trainers (\n    trainer_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    specialization TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n);\n\nExplanation:\n\nPrimary Key: trainer_id ensures each trainer has a unique identifier.\n\n\n2. Classes Table\nThis table stores information about the classes offered at the gym.\nTable Definition:\n\nclass_id: Unique identifier for each class (Primary Key).\nname: Name of the class (e.g., Yoga, Zumba).\nschedule: Class schedule (e.g., Monday 10:00 AM).\ntrainer_id: References the trainer who teaches the class (Foreign Key).\n\nSQL Statement:\nCREATE TABLE classes (\n    class_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    schedule TEXT NOT NULL,\n    trainer_id INT REFERENCES trainers(trainer_id)\n);\n\nExplanation:\n\nPrimary Key: class_id uniquely identifies each class.\nForeign Key: trainer_id establishes a relationship with the trainers table to associate each class with a trainer.\n\n\n3. Members Table\nThis table stores information about the gym members.\nTable Definition:\n\nmember_id: Unique identifier for each member (Primary Key).\nname: Name of the member.\nemail: Contact email (must be unique).\nphone_number: Member‚Äôs contact number.\n\nSQL Statement:\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL,\n    phone_number TEXT NOT NULL\n);\n\nExplanation:\n\nPrimary Key: member_id ensures each member is uniquely identified.\n\n\n4. Enrollments Table\nThis table tracks which members are enrolled in which classes.\nTable Definition:\n\nenrollment_id: Unique identifier for each enrollment (Primary Key).\nmember_id: References the member enrolled (Foreign Key).\nclass_id: References the class the member is enrolled in (Foreign Key).\n\nSQL Statement:\nCREATE TABLE enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    class_id INT REFERENCES classes(class_id)\n);\n\nExplanation:\n\nPrimary Key: enrollment_id uniquely identifies each enrollment.\nForeign Keys:\n\nmember_id links to the members table to associate an enrollment with a member.\nclass_id links to the classes table to associate an enrollment with a class.\n\n\n\n\nStep 2: DML Operations\nPerform the following operations in SQL:\n1. Add 5 Trainers\nINSERT INTO trainers (name, specialization, email) VALUES\n('John Doe', 'Yoga', 'john.doe@example.com'),\n('Jane Smith', 'Strength Training', 'jane.smith@example.com'),\n('Mark Lee', 'Zumba', 'mark.lee@example.com'),\n('Emily Davis', 'Cardio', 'emily.davis@example.com'),\n('Chris Johnson', 'Pilates', 'chris.johnson@example.com');\n\n2. Add 5 Classes\nINSERT INTO classes (name, schedule, trainer_id) VALUES\n('Yoga Basics', 'Monday 10:00 AM', 1),\n('Advanced Strength', 'Tuesday 2:00 PM', 2),\n('Zumba Fun', 'Wednesday 5:00 PM', 3),\n('Cardio Blast', 'Thursday 6:00 AM', 4),\n('Pilates Core', 'Friday 8:00 AM', 5);\n\n3. Add 5 Members\nINSERT INTO members (name, email, phone_number) VALUES\n('Alice Green', 'alice.green@example.com', '123-456-7890'),\n('Bob Brown', 'bob.brown@example.com', '234-567-8901'),\n('Cathy White', 'cathy.white@example.com', '345-678-9012'),\n('David Black', 'david.black@example.com', '456-789-0123'),\n('Ella Blue', 'ella.blue@example.com', '567-890-1234');\n\n4. Enroll 5 Members in Classes\nINSERT INTO enrollments (member_id, class_id) VALUES\n(1, 1),\n(2, 2),\n(3, 3),\n(4, 4),\n(5, 5);\n\n5. Retrieve All Trainers\nSELECT * FROM trainers;\n\n6. Retrieve All Classes Scheduled on Wednesday\nSELECT * FROM classes WHERE schedule LIKE '%Wednesday%';\n\n7. Update a Trainer's Specialization\nUPDATE trainers SET specialization = 'Advanced Yoga' WHERE name = 'John Doe';\n\n8. Delete the Class \"Zumba Fun\"\nDELETE FROM classes WHERE name = 'Zumba Fun';\n\n9. Retrieve All Enrollments\nSELECT * FROM enrollments;\n\n10. Delete a Member and Their Enrollments\nDELETE FROM enrollments WHERE member_id = 1;\nDELETE FROM members WHERE member_id = 1;\n\n\nSubmission\n\nShow the results of your SELECT queries.\nEnsure all tables are created with proper primary and foreign keys.\nSubmit your SQL script and screenshots of the results.\n\n\nWrap-Up\nThis laboratory has guided you through creating tables with relationships using foreign keys and performing various DML operations. Understanding these concepts is fundamental to managing relational databases effectively."
        },
        {
          "title": "Task 1",
          "description": "Microdeliverable Task 1: Setting Up the Backend & Database\nObjective\nIn this task, students will initialize their backend project and create a new database using Render or NeonDB. They will save the database connection URL and configure it in the backend .env file.\n\nTask Instructions\n1. Initialize the Backend\n\nCreate a new project folder for the backend.\nOpen a terminal and navigate to the project folder.\nRun the following command to initialize a Node.js project:\nnpm init -y\n\n\nInstall the necessary dependencies:\nnpm install express pg-promise dotenv cors\n\n\nCreate the required project structure:\nbackend/\n‚îú‚îÄ‚îÄ db/\n‚îÇ   ‚îú‚îÄ‚îÄ db.js\n‚îú‚îÄ‚îÄ routes/\n‚îú‚îÄ‚îÄ controllers/\n‚îú‚îÄ‚îÄ .env\n‚îú‚îÄ‚îÄ index.js\n‚îú‚îÄ‚îÄ package.json\n\n\n\n2. Create a Database\n\nChoose one of the following platforms to create a PostgreSQL database:\n\nRender\nNeonDB\n\n\n\nFor Render:\n\nGo to Render and sign in.\nClick New Database and choose PostgreSQL.\nName your database and select a region.\nCopy the Database URL provided after creation.\n\nFor NeonDB:\n\nGo to NeonDB and sign in.\nClick Create a New Project and choose PostgreSQL.\nFollow the setup instructions and copy the Connection URL.\n\n3. Configure the Database in the Backend\n\nOpen the .env file in the backend project and add the database URL:\nDATABASE_URL=your_database_url_here\n\n\nOpen db/db.js and configure the database connection:\nimport pg from 'pg-promise';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nconst pgp = pg();\nconst db = pgp(process.env.DATABASE_URL);\n\nexport { db };\n\n\nTest the connection by running:\nnode index.js\n\nEnsure the server starts without errors.\n\n4. Submission Requirements\n\nSubmit a GitHub repository link containing:\n\nBackend project setup\n\n\nProvide a screenshot of the database setup on Render or NeonDB.\nProvide a screenshot of the¬†.env file\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nBackend project initialized correctly\n40%\n\n\nDatabase created successfully\n40%\n\n\nConnection configured in .env & tested\n20%"
        },
        {
          "title": "ERD Problems",
          "description": "Case Study 1: Event Management System\nA company that organizes events needs a system to manage its events, attendees, and the staff assigned to each event. Each event has a name, a description, a date, and a specific location where it takes place. The company also needs to store information about attendees, including their name, email, and phone number, so they can be contacted if there are any changes to the event.\nThe system should track which attendees register for which events, along with the registration date. Additionally, the system should document the staff assigned to events (such as technicians, coordinators, or hosts), including their name, role, and email. Finally, it‚Äôs important to maintain a record of the venues where events take place, including the venue's name, address, and maximum capacity.\nRelationships:\n\nEach event is held at one specific venue, but a venue can host multiple events.\nAn event can have multiple registered attendees, and an attendee can participate in multiple events.\nEach event can involve multiple staff members, and a staff member can work on multiple events.\n\n\nCase Study 2: Online Learning Platform\nAn online learning platform needs a system to manage students, available courses, and instructors who teach those courses. Each student has a name, email, and the date they registered on the platform. The available courses have a title, description, and credit value to represent their academic load.\nInstructors are also part of the system, with details such as their name, email, and the department they belong to. The system needs to track which courses each instructor teaches. Students can enroll in multiple courses, and each course can have multiple enrolled students. The system should also track assignments given in each course, including the assignment title, due date, and maximum score.\nFinally, students must be able to submit their assignments, with records of the submission date and the score received for each submission.\nRelationships:\n\nEach course is taught by one instructor, but an instructor can teach multiple courses.\nStudents can enroll in multiple courses, and each course can have multiple students enrolled.\nA course can have multiple assignments, and each assignment can be submitted by multiple students.\n\n\nCase Study 3: Hotel Reservation System\nA hotel needs a system to manage reservations made by guests, the available rooms, and additional services offered. Each guest has a name, email, and phone number to allow the hotel to contact them.\nWhen a guest makes a reservation, the system must record the assigned room, check-in and check-out dates, and payment details, such as the payment date, amount, and method. Hotel rooms have a room number, type (e.g., standard, suite, or deluxe), and price per night.\nThe hotel also offers additional services such as spa treatments, laundry, or in-room dining. The system must track which services are used by each guest during their stay, including the quantity of each service used.\nRelationships:\n\nEach guest can make multiple reservations, but each reservation belongs to a single guest.\nA reservation is for one specific room, but a room can be reserved multiple times at different dates.\nA reservation can include multiple services, and each service can be used in multiple reservations."
        },
        {
          "title": "Lab 2",
          "description": "Laboratory Guide: University Database Creation and DML Operations\n\nObjective\nBy the end of this laboratory, students will:\n\nUnderstand how to create tables for a university database system.\nLearn how to define primary and foreign keys.\nPractice creating relationships between tables using foreign keys.\nPerform basic DML operations: INSERT, DELETE, UPDATE, and SELECT.\n\n\nUniversity Database Problem\nThe university database system requires the following tables:\n\nStudents: Information about the students enrolled in the university.\nProfessors: Information about the professors teaching courses.\nCourses: Details of the courses offered at the university.\nEnrollments: Tracks which students are enrolled in which courses.\n\n\nStep 1: Creating Tables\n1. Students Table\nThis table stores information about the students.\nTable Definition:\n\nstudent_id: Unique identifier for each student (Primary Key).\nname: Name of the student.\nemail: Contact email (must be unique).\nmajor: The student‚Äôs field of study.\n\nSQL Statement:\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL,\n    major TEXT NOT NULL\n);\n\nExplanation:\n\nPrimary Key: student_id ensures each student is uniquely identified.\n\n\n2. Professors Table\nThis table stores information about the professors.\nTable Definition:\n\nprofessor_id: Unique identifier for each professor (Primary Key).\nname: Name of the professor.\nemail: Contact email (must be unique).\ndepartment: The professor‚Äôs department.\n\nSQL Statement:\nCREATE TABLE professors (\n    professor_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL,\n    department TEXT NOT NULL\n);\n\nExplanation:\n\nPrimary Key: professor_id ensures each professor is uniquely identified.\n\n\n3. Courses Table\nThis table stores information about the courses offered at the university.\nTable Definition:\n\ncourse_id: Unique identifier for each course (Primary Key).\nname: Name of the course.\ncredits: Number of credits the course is worth.\nprofessor_id: References the professor teaching the course (Foreign Key).\n\nSQL Statement:\nCREATE TABLE courses (\n    course_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    credits INT NOT NULL,\n    professor_id INT REFERENCES professors(professor_id)\n);\n\nExplanation:\n\nPrimary Key: course_id uniquely identifies each course.\nForeign Key: professor_id establishes a relationship with the professors table to associate each course with a professor.\n\n\n4. Enrollments Table\nThis table tracks which students are enrolled in which courses.\nTable Definition:\n\nenrollment_id: Unique identifier for each enrollment (Primary Key).\nstudent_id: References the student enrolled (Foreign Key).\ncourse_id: References the course the student is enrolled in (Foreign Key).\n\nSQL Statement:\nCREATE TABLE enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    course_id INT REFERENCES courses(course_id)\n);\n\nExplanation:\n\nPrimary Key: enrollment_id uniquely identifies each enrollment.\nForeign Keys:\n\nstudent_id links to the students table to associate an enrollment with a student.\ncourse_id links to the courses table to associate an enrollment with a course.\n\n\n\n\nStep 2: DML Operations\nPerform the following operations in SQL:\n1. Add 5 Students\n¬†\n2. Add 3 Professors\n\n¬†\n3. Add 5 Courses\n\n¬†\n4. Enroll 5 Students in Courses\n\n¬†\n5. Retrieve All Students\n\n¬†\n6. Retrieve All Courses Taught by Dr. Smith\n\n¬†\n7. Update a Student‚Äôs Major\n\n¬†\n8. Delete a Course\n\n¬†\n9. Retrieve All Enrollments for a Specific Course\n\n¬†\n10. Delete a Student and Their Enrollments\n\n\n\nSubmission\n\nShow the results of your SELECT queries.\nEnsure all tables are created with proper primary and foreign keys.\nSubmit your SQL script and screenshots of the results.\n\n\nWrap-Up\nThis laboratory has guided you through creating tables with relationships using foreign keys and performing various DML operations. Understanding these concepts is fundamental to managing relational databases effectively."
        },
        {
          "title": "Joins 1",
          "description": "1. Practice Data Elements\nUse the following SQL to create tables and insert data for examples and exercises:\nTable Creation\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL\n);\n\nCREATE TABLE enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    course TEXT NOT NULL\n);\n\nCREATE TABLE professors (\n    professor_id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    department TEXT NOT NULL\n);\n\nCREATE TABLE courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name TEXT NOT NULL,\n    professor_id INT REFERENCES professors(professor_id)\n);\n\nData Insertion\n-- Students\nINSERT INTO students (name) VALUES\n('Alice'),\n('Bob'),\n('Cathy'),\n('David');\n\n-- Enrollments\nINSERT INTO enrollments (student_id, course) VALUES\n(1, 'Math'),\n(2, 'Science'),\n(2, 'History'),\n(4, 'Art');\n\n-- Professors\nINSERT INTO professors (name, department) VALUES\n('Dr. Smith', 'Mathematics'),\n('Dr. Johnson', 'Science'),\n('Dr. Lee', 'History');\n\n-- Courses\nINSERT INTO courses (course_name, professor_id) VALUES\n('Math', 1),\n('Science', 2),\n('History', 3),\n('Art', NULL);\n\n\nCase Study 1: INNER JOIN\nProblem:\n\nFind all students and their enrolled courses.\n\nExpected Result:\n\n\n\nname\ncourse\n\n\n\n\nAlice\nMath\n\n\nBob\nScience\n\n\nBob\nHistory\n\n\nDavid\nArt\n\n\n\n\nCase Study 2: LEFT JOIN\nProblem:\n\nFind all students and their enrolled courses, including students not enrolled in any course.\n\nExpected Result:\n\n\n\nname\ncourse\n\n\n\n\nAlice\nMath\n\n\nBob\nScience\n\n\nBob\nHistory\n\n\nCathy\nNULL\n\n\nDavid\nArt\n\n\n\n\nCase Study 3: Combining Professors and Courses (INNER JOIN)\nProblem:\n\nList all courses along with the names of their professors.\n\nExpected Result:\n\n\n\ncourse_name\nprofessor\n\n\n\n\nMath\nDr. Smith\n\n\nScience\nDr. Johnson\n\n\nHistory\nDr. Lee\n\n\n\n\nCase Study 4: LEFT JOIN for Courses Without Professors\nProblem:\n\nList all courses and their professors, including courses without assigned professors.\n\n\n\nExpected Result:\n\n\n\ncourse_name\nprofessor\n\n\n\n\nMath\nDr. Smith\n\n\nScience\nDr. Johnson\n\n\nHistory\nDr. Lee\n\n\nArt\nNULL\n\n\n\n\n2. Solve it by your self\n\nCreate a departments table and associate it with the professors table.\nWrite queries using INNER JOIN and LEFT JOIN to:\n\nFind all professors and their departments.\nList all departments and the professors working in them, including departments with no professors.\n\n\nSubmit your SQL scripts and query results in the next class."
        },
        {
          "title": "Refactoring Express Backend",
          "description": "Refactoring Express Backend\nAssignment Title: Refactoring Express Backend for Modular Design\nDescription:\nIn this assignment, you will refactor your existing Express backend for the e-commerce project to improve its modularity, maintainability, and scalability. You will organize routes and controllers, and implement environment variables to securely manage sensitive configuration data. The refactoring will involve handling users, products, orders, and order details tables.\n\nLearning Objectives:\nBy completing this assignment, you will:\n\nUnderstand the importance of modular design in backend development.\nOrganize routes and controllers in separate files.\nImplement environment variables using dotenv.\nTest the refactored API endpoints using ThunderClient.\n\n\nAssignment Instructions:\n\n\nEnvironment Setup:\n\nCreate a .env file in your project root directory.\nDefine variables for the port and database connection:\n\nDATABASE_URL=postgresql://user:password@localhost:5432/ecommerce\n\n\nUse the dotenv package to load these variables in your index.js file.\n\n\n\nFolder Structure:\n\nOrganize your project with the following folder structure:\nproject-root/\n‚îú‚îÄ‚îÄ routes/\n‚îÇ   ‚îú‚îÄ‚îÄ userRoutes.js\n‚îÇ   ‚îú‚îÄ‚îÄ productRoutes.js\n‚îÇ   ‚îú‚îÄ‚îÄ orderRoutes.js\n‚îÇ   ‚îî‚îÄ‚îÄ orderDetailRoutes.js\n‚îú‚îÄ‚îÄ controllers/\n‚îÇ   ‚îú‚îÄ‚îÄ userController.js\n‚îÇ   ‚îú‚îÄ‚îÄ productController.js\n‚îÇ   ‚îú‚îÄ‚îÄ orderController.js\n‚îÇ   ‚îî‚îÄ‚îÄ orderDetailController.js\n‚îú‚îÄ‚îÄ db.js\n‚îú‚îÄ‚îÄ index.js\n‚îî‚îÄ‚îÄ .env\n\n\n\n\n\nImplement Routes:\n\nMove the routes for users, products, orders, and order details into their respective route files.\nIn the index.js file, import and mount these routes using app.use().\n\n\n\nCreate Controllers:\n\nMove business logic for fetching and creating users, products, orders, and order details into their respective controllers.\nEnsure the controllers interact with the database via SQL queries.\n\n\n\nDatabase Connection:\n\nUse the pg-promise package for database queries.\nEstablish a connection in the db.js file and export it for use in the controllers.\n\n\n\nTesting:\n\nTest all API endpoints using Postman.\nVerify that the refactored API returns correct responses for the listed endpoints.\n\n\n\n\nSubmission Requirements:\n\nSubmit the github repository\n\nGrading Criteria:\n\n\n\nCriteria\nWeightage\n\n\n\n\nFolder structure and organization\n1%\n\n\nCorrect implementation of routes and controllers\n1%\n\n\nUse of environment variables for configuration\n1%"
        },
        {
          "title": "Movie App",
          "description": "Assignment: Developing a Full-Stack Movie Management App\n¬†\nObjective:\nIn this assignment, students will design and develop a full-stack application that manages movies, their cast, and earnings per country. The project will include:\n- Entity-Relationship Diagram (ERD)\n- SQL tables and database structure\n- Backend using Node.js with Express\n- Frontend using React with CRUD operations\n¬†\nCase Study: Movie Management System\nA global movie production company wants to develop an application to store information about its movies, the cast involved, and earnings generated from different countries. The system should:\n- Store movies and their details such as title, release year, genre, and duration.\n- Maintain a database of actors and their roles in different movies.\n- Track movie earnings from different countries.\n- Provide CRUD functionality for managing movies, actors, and earnings.\n¬†\nPart 1: Database Design\n\n¬†1.1 Entity-Relationship Diagram (ERD)\n- Design an ER diagram that includes the following entities:\n¬† - Movie (MovieID, Title, ReleaseYear, Genre, Duration)\n¬† - Actor (ActorID, Name, DateOfBirth, Nationality)\n¬† - MovieCast (MovieID, ActorID, Role)\n¬† - Earnings (EarningsID, MovieID, Country, Revenue)\n¬†\n¬†1.2 SQL Table Creation\n- Write SQL scripts to create the required tables with relationships and constraints.\n- Implement primary keys, foreign keys, and appropriate data types.\n¬†\nPart 2: Backend Development\n¬†2.1 Setting up Express and PostgreSQL\n- Initialize a Node.js project with Express.\n- Install `pg-promise` for PostgreSQL database connection.\n- Implement API routes for managing movies, actors, and earnings.\n¬†\n¬†2.2 API Endpoints\nDevelop CRUD endpoints:\n\nImplement Validations and Exception Management\n\n- Movies:\n¬† - `GET /movies` - Retrieve all movies\n¬† - `POST /movies` - Add a new movie\n¬† - `PUT /movies/:id` - Update movie details\n¬† - `DELETE /movies/:id` - Remove a movie\n- Actors:\n¬† - `GET /actors` - Retrieve all actors\n¬† - `POST /actors` - Add a new actor\n¬† - `PUT /actors/:id` - Update actor details\n¬† - `DELETE /actors/:id` - Remove an actor\n- Earnings:\n¬† - `GET /earnings` - Retrieve all earnings\n¬† - `POST /earnings` - Add earnings for a movie in a country\n¬† - `PUT /earnings/:id` - Update earnings\n¬† - `DELETE /earnings/:id` - Remove earnings entry\n¬†\nPart 3: Frontend Development (React)\n¬†3.1 Setting up React with Vite\n- Create a React project using Vite.\n- Install necessary dependencies: `react-router-dom`, `fetch`.\n- Implement routing and UI components.\n¬†\n3.2 Components Structure\nmovie-app-frontend/\n‚îú‚îÄ‚îÄ src/\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components/\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ MovieList.jsx\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AddMovieForm.jsx\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ActorList.jsx\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ EarningsList.jsx\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ screens/\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ MovieScreen.jsx\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ActorScreen.jsx\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ EarningsScreen.jsx\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ App.jsx\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.jsx\n‚îî‚îÄ‚îÄ package.json\n¬†\n¬†\n¬†Submission Guidelines\n- Submit the project on GitHub.\n- Provide ER diagram, SQL scripts, backend code, and frontend implementation.\n- Include a README file with setup instructions."
        },
        {
          "title": "Secure Back-End",
          "description": "Extending the User Authentication System\nObjective\nIn this assignment, you will extend the existing user authentication system by implementing user registration, securing additional routes with authentication middleware, and deploying the backend on Render. You will submit your completed project via GitHub.\nTasks\n1. Implement User Registration\n\nCreate a new endpoint (POST /register) that allows users to sign up.\nStore user details in the database (email, name, lastname, password).\nFor simplicity, the password does not need to be hashed in this assignment.\n\n2. Secure Routes Using Authentication Middleware\n\nImplement middleware to validate JWT tokens.\nApply this middleware to protect specific API routes (e.g., accessing user details, modifying user information, etc.).\nEnsure that only authenticated users can access these secured routes.\n\n3. Submit the Updated Project via GitHub\n\nPush all the updated code, including the new authentication functionality, to a public GitHub repository.\nInclude a README.md file that explains how to set up and run the project.\n\n4. Deploy the Backend on Render\n\nDeploy your Express backend on Render.\nEnsure the API is publicly accessible.\nProvide the deployed API URL in your submission.\n\nSubmission Guidelines\n\nSubmit the GitHub repository link with the updated authentication system.\nProvide the Render deployment URL where the backend is hosted.\nEnsure the project includes proper documentation in the README file.\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nUser registration endpoint\n2\n\n\nAuthentication middleware applied\n2\n\n\nSuccessful backend deployment on Render\n1"
        },
        {
          "title": "Lab Guide Express 1",
          "description": "Building an Express Backend for Clients and Phone Numbers\nObjective:\nIn this assignment, you will create a RESTful backend using Express and PostgreSQL for managing clients and their associated phone numbers. You will learn how to set up tables with relationships, structure your project following best practices, and test your API.\n\nPart 1: Database Setup\n1.1 Create the Database Tables:\n\nCreate the following tables using PostgreSQL:\n\nClients Table:\n\nid (Primary Key, auto-increment)\nname (Text, not null)\nemail (Text, unique, not null)\n\nPhones Table:\n\nid (Primary Key, auto-increment)\nclient_id (Foreign Key referencing the clients table)\nphone_number (Text, not null)\n\n1.2 Foreign Key:\n\nSet up a 1-to-Many relationship between the clients table and the phones table using the client_id foreign key.\n\n1.3 SQL Table Schema Example:\nCREATE TABLE clients (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n);\n\nCREATE TABLE phones (\n    id SERIAL PRIMARY KEY,\n    client_id INT REFERENCES clients(id),\n    phone_number TEXT NOT NULL\n);\n\n\nPart 2: Setting Up the GitHub Repository\n2.1 Create a GitHub Repository:\n\nGo to GitHub and create a new repository named clients-phones-express.\nInclude a .gitignore file for Node.js.\n\n2.2 Clone the Repository Locally:\n\nClone the repository to your local machine.\n\n\n¬†\n\nPart 3: Initialize the Project\n3.1 Initialize the Project with NPM:\n\nprompt in the terminal:\n\nnpm init -y\n\n3.2 Modify package.json:\n\nChange the project type to module by adding or modifying:\n\n\"type\": \"module\"\n\n\nPart 4: Install Dependencies\n4.1 Install Required Packages:\n\nRun the following commands to install dependencies:\n\nnpm install pg-promise express dotenv\n\n4.2 Install Development Dependencies:\n\nFor development purposes, you may also install nodemon:\n\nnpm install nodemon -D\n4.3 Add the script \"dev\" in the package.json file:\n\nto run the server from now on the command would be \"npm run dev\"\n¬†\n\nPart 5: Project Structure\n5.1 Folder Structure:\nOrganize your project with the following structure:\nproject-root/\n‚îú‚îÄ‚îÄ routes/\n‚îÇ   ‚îú‚îÄ‚îÄ clientRoutes.js\n‚îÇ   ‚îî‚îÄ‚îÄ phoneRoutes.js\n‚îú‚îÄ‚îÄ controllers/\n‚îÇ   ‚îú‚îÄ‚îÄ clientController.js\n‚îÇ   ‚îî‚îÄ‚îÄ phoneController.js\n‚îú‚îÄ‚îÄ db/\n‚îÇ   ‚îî‚îÄ‚îÄ db.js\n‚îú‚îÄ‚îÄ .env\n‚îú‚îÄ‚îÄ index.js\n‚îú‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ .gitignore\n\n\nPart 6: Implement the Backend\n6.1 Database Connection:\n\nCreate a db.js file in the db folder and use pg-promise to establish a connection:\n\n¬†\n\nimport pg from 'pg-promise'\nimport dotenv from 'dotenv'\ndotenv.config()\n\nconst pgc = pg()\nconst str = process.env.CN_STR\n\nexport const db = pgc(str)\n\ndb.connect()\n.then(() => {\nconsole.log(\"Success Connection\")\n})\n.catch((err) => {\nconsole.log(` Error Connection ${err} `)\n})\n\n\n\n6.2 Environment Variables:\n\nCreate a .env file to store your database URL and port:\n\n\nDATABASE_URL=postgresql://user:password@localhost:5432/clientsdb\n\n6.3 Define Routes:\n\nIn clientRoutes.js: Define routes for fetching, creating, updating, and deleting clients.\n\n\n\n\nIn phoneRoutes.js: Define routes for fetching, creating, updating, and deleting phone numbers.\n\n\n\n6.4 Implement Controllers:\n\nImplement business logic in the respective controllers using SQL queries.\n\n\nIn clientController.js:\n\n\n\n\nIn phoneController.js:\n\n\n\n\nPart 7: Test the API\n\nStart the server using:\n\nnpm run dev \n\n\nUse Postman to test the following endpoints:\n\nGET /api/clients\nPOST /api/clients\nPUT /api/clients/:id\nDELETE /api/clients/:id\nGET /api/phones\nPOST /api/phones\nPUT /api/phones/:id\nDELETE /api/phones/:id\n\n\n\n\nSubmission Requirements:\n\nSubmit the link to your GitHub repository.\nInclude the SQL scripts for creating the tables and sample data.\nProvide Thunder Client screenshots showing successful API tests.\n\n\nGrading Criteria:\n\n\n\nCriteria\nWeightage\n\n\n\n\nCorrect implementation of tables and relationships\n1%\n\n\nProject structure and folder organization & functionality\n1%"
        },
        {
          "title": "Sets 1",
          "description": "Assignment: Sets and Their Operations\nDefined Sets\nLet the following sets be given:\n\nSet A = {1, 2, 3, 4, 5}\nSet B = {3, 4, 5, 6, 7}\nSet C = {5, 6, 7, 8, 9}\nSet D = {2, 4, 6, 8, 10}\nSet E = {1, 3, 5, 7, 9}\n\nInstructions\nFor each question, calculate the result of the operation and write it in the answer box provided. Use proper set notation where necessary.\nExercises\n\nFind A ‚à™ B (Union of A and B).\nFind C ‚à© D (Intersection of C and D).\nFind A ‚à™ D.\nFind B ‚à© E.\nFind (A ‚à© B) ‚à™ C.\nFind (C ‚à™ E) ‚à© D.\nFind A ‚à™ (B ‚à© D).\n\nSubmission\n\nShow all work, including intermediate steps for unions, intersections, and differences.\nSubmit your answers in set notation."
        },
        {
          "title": "Entity Relationship Model (ERM)",
          "description": "Reading 1 (2 Points)\n\nEntity Relationship Model\n\nHow are entities defined and represented in the Entity Relationship Model (ERM)?\nHow are attributes defined and associated with entities in the Entity Relationship Model (ERM)?\nWhat is a relationship in the context of the Entity Relationship Model (ERM), and how does it connect entities?\nList and describe the different types of Relationships found in the Entity Relationship Model (Cardinality).\nCreate an Entity Relationship Model Diagram of People that owns Pets."
        },
        {
          "title": "ERM Problems",
          "description": "3 Points\n¬†\nCase Study 1: University Enrollment\nProblem Statement:\"A university wants to build a database to manage its courses and students. Each student can enroll in multiple courses, and each course can have many students. Students have the following details: Student ID, Name, and Major. Courses have a Course ID, Name, and Credits. The university also tracks which professors teach which courses. Professors have a Professor ID, Name, and Department.\"\nActivity Instructions:\n\nIdentify the entities in the scenario.\nDefine the attributes for each entity.\nDetermine the primary keys and foreign keys for each table.\nDetermine the cardinality of relationships (e.g., student to course, professor to course).\nDraw an ERM diagram representing the system.\n\n\nCase Study 2: Hospital Management System\nScenario:A hospital needs a database to manage patient records, doctors, and appointments. The system must handle the following:\n\nPatients are assigned a unique Patient ID and have attributes like Name, Date of Birth, and Medical History.\nDoctors are assigned a unique Doctor ID and have attributes like Name, Specialty, and Phone.\nEach appointment involves one patient and one doctor and includes Appointment ID, Date, and Time.\n\nQuestions:\n\nWhat are the entities in this scenario?\nDefine the attributes for each entity.\nIdentify primary keys and foreign keys.\nWhat type of relationship exists between patients and appointments? Doctors and appointments?\nDraw an ERM diagram representing the system.\n\n\nCase Study 3: Library System\nScenario:A library wants to track books, members, and borrow records. The system must manage:\n\nBooks have attributes like Book ID, Title, Author, and Genre.\nMembers are identified by Member ID and have attributes like Name, Address, and Phone.\nA member can borrow multiple books, and each borrowing record includes Borrow Date and Return Date.\n\nQuestions:\n\nIdentify the entities in the system.\nList the attributes for each entity.\nIdentify primary keys and foreign keys.\nWhat is the cardinality between members and books?\nDraw an ERM diagram representing the system."
        },
        {
          "title": "Task 5",
          "description": "Microdeliverable Task 5: Setting Up the React Vite App\nObjective\nIn this task, students will:\n\nCreate a new React Vite application.\nInitialize a Git repository and commit the project using the GitHub extension in VS Code.\nStructure the project by setting up the required folders inside src/.\nRemove unnecessary default files (such as the favicon) and update the project title.\nInstall and configure Bootstrap and Bootswatch for styling.\n\n\nTask Instructions\n1. Create a New React Vite App\n\nOpen a terminal and navigate to your development folder.\nRun the following command to create a Vite React project:\nnpx create-vite@latest my-app {replace this name}\n\n\nNavigate into the project folder:\ncd my-app\n\n\nInstall the dependencies:\nnpm install\n\n\n\n\n2. Initialize a Git Repository & Commit the Project\n\nOpen the project in VS Code.\nClick on the Source Control icon in the sidebar or press Ctrl + Shift + G.\nClick Initialize Repository.\n\nCreate your first commit\n\nPush the project to GitHub:\n\nClick on Publish to GitHub in the Source Control panel.\nFollow the instructions to create a new GitHub repository.\nPush the project to GitHub.\n\n\n\n\n3. Setup Project Folder Structure\n\nInside the src/ folder, create the following subfolders:\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îú‚îÄ‚îÄ screenComponents/\n‚îú‚îÄ‚îÄ App.jsx\n‚îú‚îÄ‚îÄ main.jsx\n\n\ncomponents/ ‚Üí Will contain reusable UI components (buttons, forms, etc.).\nscreenComponents/ ‚Üí Will contain the main screen/page components.\n\n\n4. Remove Unnecessary Default Files\n\n\nRemove the default favicon:\n\nDelete the file: public/vite.svg.\nReplace it with your own logo or leave it blank.\nFlat Icon (Icon Provider)\n\n\n\nUpdate the project title:\n\nOpen index.html.\nLocate the <title> tag and change it to your project name:\n\n<title>{Put the name of your project}</title>\n\n\n\n\n5. Install & Configure Bootstrap & Bootswatch\n\nInstall Bootstrap in the project:\nnpm install bootstrap\n\n\nImport Bootstrap CSS and Bootswatch theme in index.html:\n\nOpen index.html and add the following inside the <head> tag:\n\n<link rel=\"stylesheet\" href=\"{your bootswatch template}\">\nBootswatch Project\n\n\nAdd Bootstrap JS in index.html before the closing </body> tag:\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n\n\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL containing:\n\nReact Vite project setup.\nProper project structure (components/ and screenComponents/ folders inside src/).\nUpdated project title in index.html.\n\n\nScreenshot of:\n\nCommit history in VS Code Source Control.\nProject structure inside src/.\nBootstrap and Bootswatch properly applied.\n\n\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nReact Vite app created & initialized\n30%\n\n\nGitHub repository properly set up & committed\n20%\n\n\nProject folder structure correctly implemented\n20%\n\n\nBootstrap & Bootswatch successfully installed\n30%"
        },
        {
          "title": "Task 3",
          "description": "Microdeliverable Task 3: Implementing Controllers and Routes\nObjective\nIn this task, students will:\n\nImplement controllers for handling database operations.\nCreate route files to define API endpoints.\nConnect controllers to routes to ensure a working backend structure.\nTest API endpoints using Postman or Thunder Client.\n\n\nTask Instructions\n1. Create Controller Files\n\nInside the backend project, create a folder named controllers.\nImplement controllers for handling database operations for each main entity (Users, Events, Attendance for Event Manager; Users, Posts, Comments for Social Media, etc.).\n\nExample: controllers/userController.js\nimport { db } from '../db/db.js';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const registerUser = async (req, res) => {\n    const { name, email, password } = req.body;\n    try {\n        \n        const sql = 'INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING *';\n        const user = await db.one(sql, [name, email, password]);\n        res.status(200).json(user);\n    } catch (error) {        const err = error.message;\n        res.status(500).json({ error: `Error registering user ${err}` });\n    }\n};\n\nexport const loginUser = async (req, res) => {\n    const { email, password } = req.body;\n    try {\n        const user = await db.oneOrNone('SELECT * FROM users WHERE email = $1 and password = $4', [email, password]);\n        if (!user) {\n            return res.status(401).json({ error: 'Invalid credentials' });\n        }\n        const token = jwt.sign({ userId: user.email }, process.env.JWT_SECRET, { expiresIn: '1h' });\n        res.json({ token });\n    } catch (error) {        const err = error.message\n        res.status(500).json({ error: `Error logging in ${err}` });\n    }\n};\n\n2. Create Route Files\n\nInside the backend project, create a folder named routes.\nDefine API routes that map to the controller functions.\n\n\n\n3. Connect Routes in index.js\n\nEnsure the main index.js file imports and uses the route files correctly.\n\nExample: index.js\nimport express from 'express';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport userRoutes from './routes/userRoutes.js';\n\ndotenv.config();\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// add your routes to the project\n\nconst PORT = process.env.PORT || 8080;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\n4. Test API Endpoints\n\nUse Postman, Thunder Client (VS Code extension)¬†to test:\nEnsure routes return correct responses and HTTP status codes.\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL containing:\n\nImplemented controllers inside controllers/.\nDefined API routes inside routes/.\nUpdated index.js with the correct route setup.\n\n\nScreenshots of API tests using Postman or Thunder Client, showing:\n\nSuccessful user registration.\nSuccessful login response with a token.\n\n\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nControllers implemented correctly\n30%\n\n\nRoutes properly defined & connected\n30%\n\n\nAPI tests completed & documented\n30%\n\n\nCode readability & structure\n10%"
        },
        {
          "title": "Entity Relationship Diagrams (ERD)",
          "description": "ERD (Part 1)\nERD (Part 2)\n\nHow are entities defined and represented in the Entity Relationship Diagram (ERD)?\nHow are attributes defined and associated with entities?\nWhat is a relationship in the context, how you represent them, and how does it connect entities?\nList and describe the different types of Relationships found (Cardinality).\nCreate an Entity Relationship Diagram of People that owns Pets.\n\n2 Points"
        },
        {
          "title": "Task 4",
          "description": "Microdeliverable Task 4: Implementing JWT Authentication & Middleware\nObjective\nIn this task, students will:\n\nInstall and configure jsonwebtoken (jwt) for authentication.\nImplement a middleware function to validate JWT tokens.\nStore and use the same secret key for encryption and decryption in the .env file.\nApply the authentication middleware to secure API routes.\nTest API routes using Postman or Thunder Client with valid and invalid tokens.\nDeploy the backend on Render.\n\n\nTask Instructions\n1. Install JSON Web Token (JWT)\nRun the following command inside your backend project:\nnpm install jsonwebtoken\n\n\n2. Add JWT Secret Key to .env\n\nOpen the .env file in the backend project.\nAdd the same KEY_SECRET variable for encrypting and validating tokens:\n\nKEY_SECRET=your_secret_key_here\n\n\n3. Implement JWT Middleware\n\nImplement the token validation middleware.\n\nExample: tokenValidation in your index.js\n\n\nconst tokenValidation = (req, res, next) => {\n    const authorization = req.headers['authorization'];\n    if (!authorization) {\n        return res.status(400).json({ message: \"You need to pass a Token\" });\n    }\n\n    const token = authorization.replace('Bearer ', '').trim();\n\n    try {\n        const secret = process.env.KEY_SECRET;\n        jwt.verify(token, secret);\n        next();\n    } catch (err) {\n        return res.status(400).json({ message: \"Invalid Token\" });\n    }\n};\n\n\n\n\n4. Secure Routes Using the Middleware\n\nApply the middleware to protect specific routes.\n\nExample: Applying Middleware in Routes\n\n\n\n5. Test API Endpoints with JWT Authentication\n\nUse Postman or Thunder Client to:\n\nAuthenticate by sending a login request and receiving a token.\nUse that token to access protected routes.\nTry making requests without a token and with an invalid token to verify security.\n\n\n\nExample headers for authentication:\nAuthorization: Bearer your_jwt_token_here\n\n\n6. Deploy the Backend on Render\n\nDeploy your backend on Render following these steps:\n\nPush your backend project to a public GitHub repository.\nGo to Render and create a new web service.\nConnect the repository and choose the appropriate runtime environment.\nEnsure your environment variables (e.g., DATABASE_URL, KEY_SECRET) are set up in Render.\nDeploy and obtain the live API URL.\n\n\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL containing:\n\nImplemented middlewares/authMiddleware.js.\nUpdated protected routes using the middleware.\n.env file with KEY_SECRET (excluded from public repositories).\n\n\nScreenshots of API tests showing:\n\nSuccessful request with a valid token.\nError message when trying to access a protected route without a token.\nError message when using an invalid token.\n\n\nRender Deployment URL with the working backend.\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nJWT middleware implemented correctly\n25%\n\n\nRoutes properly secured using middleware\n25%\n\n\nAPI tests completed & documented\n25%\n\n\nBackend deployed on Render successfully\n25%"
        },
        {
          "title": "Secure Front End",
          "description": "Assignment: Refactoring the Movie App for Authentication and Secure Routes\nObjective\nIn this assignment, you will refactor your existing React Movie App to implement authentication, secure routes, and improve the user experience by adding dynamic selectors for foreign keys.\nTasks\n1. Implement Authentication System. (2%)\n\n\nAdd a Login Form (/login) where users can authenticate.\n\n\nAdd a Register Form (/register) to allow new users to sign up.\n\n\nEnsure the authentication system communicates with the backend for user validation.\n\n\nStore JWT tokens securely in local storage.\n\n\n2. Secure Routes with Authentication (2%)\n\n\nProtect certain pages (e.g., adding or modifying movies) to be accessible only for authenticated users.\n\n\nRedirect unauthorized users to the login page.\n\n\nImplement a logout functionality that clears stored credentials and redirects to the login page.\n\n\n3. Enhance Forms with Foreign Key Selectors (1%)\n\n\nInstead of manually entering Movie IDs or Actor IDs, create dropdown selectors that fetch available movies or actors from the backend.\n\n\nApply this for:\n\n\nAssigning actors to a movie\n\n\nAdding earnings by selecting a movie\n\n\n\n\n4. Submit the Updated Project via GitHub\n\n\nPush the refactored React code with authentication and secure routes to a public GitHub repository"
        },
        {
          "title": "Task 6",
          "description": "2. Create Authentication Forms\nStudents must validate response.ok when submitting the form. If response.ok is true, they should store the JWT token in localStorage upon login. Below are the detailed instructions for implementing the authentication forms.\nRegister Form (RegisterForm.jsx)\n\nCreate a functional component inside the components/ folder.\nCollect user name, email, and password.\nSend a request to the backend POST /api/users/register endpoint.\n\nimport React, { useState } from 'react';\n\nexport const RegisterForm = () => {\n    const [formData, setFormData] = useState({ name: '', email: '', password: '' });\n\n    const onChangeHandler = (event) => {\n        const property = event.target.name;\n        const value = event.target.value;\n        const tmpObject = formData;\n        tmpObject[property] = value;\n        setFormData(tmpObject);\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch('http://localhost:3000/api/users/register', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n            \n        }else{                }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={handleChange} required />\n            <input type=\"email\" name=\"email\" placeholder=\"Email\" onChange={handleChange} required />\n            <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={handleChange} required />\n            <button type=\"submit\">Register</button>\n        </form>\n    );\n};\n\nLogin Form (LoginForm.jsx)\n\nCollect email and password.\nSend a request to POST /api/users/login.\nIf login is successful, store the JWT token in localStorage.\n\n¬†\n3. Set Up Routing in **App.jsx\nWhat is a Route?\nA route in React defines which component should be displayed when a user visits a particular URL.\nConfigure Routes in **App.jsx\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { RegisterForm } from './components/RegisterForm';\nimport { LoginForm } from './components/LoginForm';\nimport { NotFound } from './components/NotFound';\n\nexport const App = () => {\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/register\" element={<RegisterForm />} />\n                <Route path=\"/login\" element={<LoginForm />} />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </Router>\n    );\n};\n\n\n4. Implement the 404 Page (NotFound.jsx)\n\nThis component should be displayed for any undefined route.\n\nimport React from 'react';\n\nexport const NotFound = () => {\n    return <h2>404 - Page Not Found</h2>;\n};\n\n\nSubmission Requirements\nStudents must submit:\n\nGitHub repository URL containing:\n\nRegisterForm.jsx and LoginForm.jsx.\nRoutes correctly set up in App.jsx.\nNotFound.jsx implemented.\n\n\nScreenshots showing:\n\nSuccessful login and token stored in localStorage.\nNavigating between register and login forms.\n404 Page when accessing an undefined route.\n\n\n\n\nGrading Criteria\n\n\n\nCriteria\nWeightage\n\n\n\n\nLogin and Register Forms implemented correctly\n30%\n\n\nReact Router setup with correct paths\n30%\n\n\nToken stored in localStorage upon login\n20%\n\n\n404 Page (* route) implemented correctly\n20%"
        }
      ]
    },
    {
      "name": "Section 588",
      "assignments": []
    },
    {
      "name": "Section 589",
      "assignments": []
    },
    {
      "name": "Section 590",
      "assignments": []
    },
    {
      "name": "Section 591",
      "assignments": []
    },
    {
      "name": "Section 592",
      "assignments": []
    },
    {
      "name": "Section 593",
      "assignments": []
    },
    {
      "name": "Section 594",
      "assignments": []
    },
    {
      "name": "Section 595",
      "assignments": []
    },
    {
      "name": "Section 596",
      "assignments": []
    }
  ]
}